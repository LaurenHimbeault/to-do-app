name: CI

on:
  push:
    branches: [main]
    paths:
      - "backend/**"
      - "frontend/**"
      - ".github/workflows/**"
  pull_request:
    paths:
      - "backend/**"
      - "frontend/**"
      - ".github/workflows/**"

jobs:
jobs:
  backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: app
          POSTGRES_PASSWORD: app
          POSTGRES_DB: appdb
        ports: ["5432:5432"]
        options: >-
          --health-cmd="pg_isready -U app -d appdb"
          --health-interval=5s --health-timeout=5s --health-retries=20
    env:
      DATABASE_URL: postgres://app:app@localhost:5432/appdb
      NODE_ENV: test
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: backend/package-lock.json
      - run: npm ci
      - run: npx prisma generate
      # If tests touch DB, pick ONE init style:
      - run: npm run prisma:migrate   # prod-like migrations
      # - run: npm run db:push        # fast schema sync (no migrations)
      - run: npm run typecheck
      - run: npm run lint --if-present
      - run: npm test --if-present
      - run: npm run build --if-present
  frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: frontend/package-lock.json
      - run: npm ci
      - run: npm run typecheck
      - run: npm run lint --if-present
      - run: npm test --if-present
      - run: npm run build --if-present
